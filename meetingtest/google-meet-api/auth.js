// auth.js
const fs = require('fs');
const { google } = require('googleapis');
const readline = require('readline');

const SCOPES = ['https://www.googleapis.com/auth/calendar'];
const TOKEN_PATH = 'token.json';
const CREDENTIALS_PATH = 'credentials.json';

// ƒê·ªçc file credentials
fs.readFile(CREDENTIALS_PATH, (err, content) => {
  if (err) return console.error('L·ªói ƒë·ªçc credentials.json:', err);
  authorize(JSON.parse(content));
});

function authorize(credentials) {
  const { client_secret, client_id, redirect_uris } = credentials.web || credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);

  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES,
  });

  console.log('\nüëâ Truy c·∫≠p link sau trong tr√¨nh duy·ªát ƒë·ªÉ x√°c th·ª±c:\n\n', authUrl, '\n');

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.question('\nüì• Nh·∫≠p m√£ x√°c th·ª±c t·∫°i ƒë√¢y: ', (code) => {
    rl.close();
    oAuth2Client.getToken(code, (err, token) => {
      if (err) return console.error('‚ùå L·ªói l·∫•y token:', err.message);
      oAuth2Client.setCredentials(token);
      fs.writeFileSync(TOKEN_PATH, JSON.stringify(token));
      console.log('\n‚úÖ ƒê√£ l∆∞u token v√†o token.json! B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i index.js\n');
    });
  });
}
